{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyM03mhQ+C7Vk8yLW/t6TWyH",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/rosenje315/Educational-Inequity-DS-Project/blob/main/Discrete%20Structures%20Project%20Logic%20Translator\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#In order to utilize the functionality of the random module, it is necessary to import \n",
        "#them into the program first\n",
        "import random\n",
        "\n",
        "#This library stores the different sentences that will be utilized in the hangman program.\n",
        "#The English sentences are stored as keys and the logic translation is stored as values\n",
        "sentence_list = {\"Polkadots and Moonbeams.\": \"P⋀Q\", \n",
        "                 \"If you liked it then you shoulda put a ring on it.\": \"P⇒Q\", \n",
        "                 \"Either Danny didn't come to the party or Virgil didn't come to the party.\": \"～P⋁～Q\", \n",
        "                 \"It don't mean a thing, if it ain't got that swing.\": \"～P⇒～Q\", \n",
        "                 \"If loving you is wrong, I don't want to be right.\": \"P⇒～Q\",\n",
        "                 \"Should I stay or should I go.\": \"P⋁Q\",\n",
        "                 \"If I fell in love with you,  would you promise to be true  and help me understand.\": \"P⇒Q⋀R\",\n",
        "                 \"Either Wotan will triumph and Valhalla will be saved or else he won't and Alberic will have  the final word.\": \"P⋀Q⋁～R⋀S\",\n",
        "                 \"If the lawn is not wet, it is not raining.\": \"～P⇒～Q\",\n",
        "                 \"The Yankees lose, but Chris does not get the win.\": \"P⋀～Q\"}\n",
        "\n",
        "#The random module is implemented here to pick a random key and its corresponding value\n",
        "#to operate the hangman functions\n",
        "key, value = random.choice(list(sentence_list.items()))\n",
        "\n",
        "#First function that defines all the different possible outcomes that can occur\n",
        "def hangman(sentence):\n",
        "    guessed = False\n",
        "    #This empty list stores all the incorrect translations the user inputs that is appended in here\n",
        "    #and will be eventually printed out to the user at the end of the round\n",
        "    wrong_sentences = []\n",
        "    #This defines the amount of lives that the user has before playing that subsequently \n",
        "    #deminish each time the user incorrectly guesses incorrectly\n",
        "    attempts = 4\n",
        "    #This outputs the directions for the user through a series of print statements including \n",
        "    #the amount of lives that the user has as well as the first illustration \n",
        "    print(\"Let's learn how to translate logic by playing Hangman!\\n\")\n",
        "    print(\"*DIRECTIONS: Use P, Q, R, & S (in that order) with the below symbols to make the logic translation.\\nPlease do not put any spaces or parenthesis in answer.*\")\n",
        "    print(\"\\nKey (copy and paste): \\n ⋀ = AND \\n ⋁ = OR \\n ～ = NOT \\n ⇒ = IF/THEN\")\n",
        "    print(\"\\n\\nLet's Play!\\n\")\n",
        "    print(\"\\nYou have \" + str(attempts) + \" remaining lives.\\n\")\n",
        "    print(hangman_illustration(attempts))\n",
        "    \n",
        "    #while loop runs on two conditions being True: the word has not been guessed and the user still has lives \n",
        "    #The while loops runs until word is guessed or the user runs out of tries\n",
        "    while not guessed and attempts > 0:\n",
        "        print(\"English: \" + str(key))\n",
        "        guess = input(\"\\nPlease translate the above English sentence into logic: \").upper()\n",
        "        if guess == value:\n",
        "            if guess in wrong_sentences:\n",
        "                print(\"\\nYou already guessed the sentence translation \" + guess)\n",
        "            else:\n",
        "                guessed = True\n",
        "        #If the user guesses the incorrect translation, they lose a life and have their answer \n",
        "        #appended to the wrong_sentences list\n",
        "        elif guess != value:\n",
        "          print(guess + \" is not correct.\\n\")\n",
        "          attempts -= 1\n",
        "          print(\"You have \" + str(attempts) + \" remaining tries.\")\n",
        "          wrong_sentences.append(guess)\n",
        "            \n",
        "        else:\n",
        "            print(\"Not a valid guess.\")\n",
        "        \n",
        "        #Each time a user loses a life, the index of each hangman illustration stage is printed\n",
        "        print(hangman_illustration(attempts))\n",
        "    \n",
        "    #This provides that the user has guessed the proper translation. If the user \n",
        "    #guesses the translation on the first try that is indicated by if there is any\n",
        "    #items in the wrong_sentence list, the print statement \"Extra brownie points for getting\n",
        "    #it on your first try\" will print out, crediting the user for their impressive skills!\n",
        "    #If the user guesses the translation but after losing lives, they will receive the \n",
        "    #same congradulatory message as well as their guesses along the way\n",
        "    if guessed:\n",
        "        print(\"\\nYay! You guessed the logic statement!\")\n",
        "        if len(wrong_sentences) == 0:\n",
        "          print(\"Extra brownie points for getting it on your first try!\")\n",
        "        elif len(wrong_sentences) != 0:\n",
        "          print(\"Here were all your guesses along the way: \" + str(wrong_sentences))\n",
        "    \n",
        "    #This provides that the user did not guess the translation which is indicated by the two\n",
        "    #print statements providing that the user ran out of lives as well as all the incorrect guesses\n",
        "    #that were attempted\n",
        "    else:\n",
        "        print(\"Sorry, you ran out of tries. The logic statement was \" + str(value) + \". Maybe next time!\")\n",
        "        print(\"Here were all your guesses along the way: \" + str(wrong_sentences))\n",
        "\n",
        "#The triple quotes allow strings to span multiple lines in that for each attempt loss,\n",
        "#there is a new hangman display showing that the user is slowly running out of attempts\n",
        "def hangman_illustration(attempts):\n",
        "    stages = [  \"\"\"\n",
        "                   --------\n",
        "                   |      |\n",
        "                   |      O\n",
        "                   |     \\|/\n",
        "                   |      |\n",
        "                   |     / \\\\\n",
        "                   -\n",
        "                \"\"\",\n",
        "                \"\"\"\n",
        "                   --------\n",
        "                   |      |\n",
        "                   |      O\n",
        "                   |     \\|/\n",
        "                   |      |\n",
        "                   |      \n",
        "                   -\n",
        "                \"\"\",\n",
        "                \"\"\"\n",
        "                   --------\n",
        "                   |      |\n",
        "                   |      O\n",
        "                   |      |\n",
        "                   |      |\n",
        "                   |     \n",
        "                   -\n",
        "                \"\"\",\n",
        "                \"\"\"\n",
        "                   --------\n",
        "                   |      |\n",
        "                   |      O\n",
        "                   |    \n",
        "                   |      \n",
        "                   |     \n",
        "                   -\n",
        "                \"\"\",\n",
        "                \"\"\"\n",
        "                   --------\n",
        "                   |      |\n",
        "                   |      \n",
        "                   |    \n",
        "                   |      \n",
        "                   |     \n",
        "                   -\n",
        "                \"\"\"\n",
        "    ]\n",
        "    return stages[attempts]\n",
        "\n",
        "#This calls the function as well as the random method to get a key and value that\n",
        "#is attributed to an associated English sentence and logic translation to be guessed\n",
        "sentence = key, value = random.choice(list(sentence_list.items()))\n",
        "hangman(sentence)\n",
        "\n"
      ],
      "metadata": {
        "id": "t_io3qBMVtp_"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}